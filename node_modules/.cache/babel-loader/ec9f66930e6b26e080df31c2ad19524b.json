{"ast":null,"code":"var _jsxFileName = \"/Users/delaram/Desktop/messenger-react-class/messenger-react/src/component/messenger/msgList.js\";\nimport React from 'react';\nimport './../../css/chat.css';\nimport Conversation from './../messenger/conversation';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { createNewConversation } from './../../action/convAction';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { conversationShow } from './../../action/convAction';\n\nclass List extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newConv: '',\n      suggestionUsers: [],\n      token: window.localStorage.getItem('token')\n    };\n  }\n\n  handleClick() {\n    this.props.dispatch(createNewConversation(this.state.name));\n    this.setState({\n      newConv: ''\n    });\n  }\n\n  handleSearch(e) {\n    const fdata = new FormData();\n    fdata.append('token', this.state.token);\n    fdata.append('query', e.target.value);\n    fdata.append('size', 4);\n    axios.post('https://api.paywith.click/explore/search/contacts/', fdata).then(response => {\n      console.log('dataaaaa:', response.data);\n      this.setState({\n        suggestionUsers: response.data.data.users\n      });\n      this.props.dispatch(conversationShow(this.state.newConv));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    axios.get('https://api.paywith.click/conversation/', {\n      params: {\n        token: this.state.token\n      }\n    }).then(function (response) {\n      console.log(response.data);\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"searchbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search\",\n      placeholder: \"Search...\",\n      onChange: e => this.handleSearch(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Fab, {\n      size: \"small\",\n      color: \"secondary\",\n      \"aria-label\": \"add\",\n      onClick: () => this.handleClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))), this.state.suggestionUsers.map((user, index) => {\n      return React.createElement(\"p\", {\n        key: user.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, user.email);\n    }), this.props.conversationList.map((item, index) => React.createElement(Conversation, {\n      key: index,\n      name: item.firstName,\n      lastName: item.lastName,\n      latestMessage: item.latestMessage,\n      unseenMessage: item.unseenMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  conversationList: state.conversationList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch: dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["/Users/delaram/Desktop/messenger-react-class/messenger-react/src/component/messenger/msgList.js"],"names":["React","Conversation","Fab","AddIcon","createNewConversation","connect","axios","conversationShow","List","Component","constructor","state","newConv","suggestionUsers","token","window","localStorage","getItem","handleClick","props","dispatch","name","setState","handleSearch","e","fdata","FormData","append","target","value","post","then","response","console","log","data","users","catch","error","componentDidMount","get","params","render","map","user","index","id","email","conversationList","item","firstName","lastName","latestMessage","unseenMessage","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './../../css/chat.css'\nimport Conversation from './../messenger/conversation'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport { createNewConversation } from './../../action/convAction'\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport { conversationShow } from './../../action/convAction'\n\nclass List extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      newConv: '',\n      suggestionUsers: [],\n      token: window.localStorage.getItem('token')\n    }\n  }\n\n  handleClick () {\n    this.props.dispatch(createNewConversation(this.state.name))\n    this.setState({ newConv: '' })\n  }\n\n  handleSearch (e) {\n    const fdata = new FormData()\n    fdata.append('token', this.state.token)\n    fdata.append('query', e.target.value)\n    fdata.append('size', 4)\n\n    axios.post('https://api.paywith.click/explore/search/contacts/', fdata)\n      .then((response) => {\n        console.log('dataaaaa:', response.data)\n        this.setState({ suggestionUsers: response.data.data.users })\n        this.props.dispatch(conversationShow(this.state.newConv))\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n\n  componentDidMount () {\n    axios.get('https://api.paywith.click/conversation/', {\n      params: {\n        token: this.state.token\n      }\n    })\n      .then(function (response) {\n        console.log(response.data)\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n      .then(function () {\n        // always executed\n      })\n  }\n\n  render () {\n    return (\n      <div className='list'>\n        <div className='searchbar'>\n          <input type='text' className='search' placeholder='Search...' onChange={(e) => this.handleSearch(e)} />\n          <Fab size='small' color='secondary' aria-label='add' onClick={() => this.handleClick()}>\n            <AddIcon />\n          </Fab>\n        </div>\n        {\n          this.state.suggestionUsers.map((user, index) => {\n            return (\n              <p key={user.id}>\n                {user.email}\n              </p>\n            )\n          })\n        }\n        {this.props.conversationList.map((item, index) => (\n          <Conversation\n            key={index}\n            name={item.firstName}\n            lastName={item.lastName}\n            latestMessage={item.latestMessage}\n            unseenMessage={item.unseenMessage}\n          />\n        )\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  conversationList: state.conversationList\n})\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: dispatch\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\n"]},"metadata":{},"sourceType":"module"}